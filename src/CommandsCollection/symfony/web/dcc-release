#!/bin/bash

############################
# DDEV Commands Collection #
############################

## https://github.com/jackd248/ddev-commands-collection
## v<version/>
## dcc-autogenerated
. "$(dirname "$0")/../scripts/colors.sh"
echo "${reset}${cyan}[DCC]${reset} DDEV Commands Collection"

## Description: Create a new app version
## Usage: release
## Example: "ddev release 4.5.0" or "ddev release 1.2.0-RC"
version=$@
composerPath="app"

# Check if given version correspond to the semver guidelines
if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
  echo -e "\033[94m[Info]\033[m Adjust composer.json and generate composer.lock"

  # Find the line number of the version entry in the composer.json file
  lineNumber=$(sed -n '/version/=' $composerPath/composer.json)

  # Update property "version"
  composer config version $version -d $composerPath

  # Generate new composer.lock file to keep the composer files valid
  composer update nothing -d "$composerPath" -q --no-scripts

  # Validate composer files
  composer validate -d "$composerPath"

  # Distinguish between Release Candidate and Release
  if [[ $version == *"RC"* ]]; then
    note="Build"
  else
    note="Release"
  fi
  # Print possible git commit message
  echo -e "\033[92m[$note]\033[m Version $version"
else
  echo -e "\033[91m[Failure]\033[m Given version '$version' not matching semantic version constraints"
fi